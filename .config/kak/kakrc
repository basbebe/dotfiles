# Documentation ————————————————————————————————————————————————————————————————

# kcr-open-doc ⇒ open kakoune.cr documentation
# kcr-open-kakrc ⇒ open kakoune.cr kakrc

# Preamble —————————————————————————————————————————————————————————————————————

try %sh{
    kcr init kakoune
    kak-lsp --kakoune --session "$kak_session"
}

try lsp-enable

# upgrade Autoload files
define-command -docstring 'rebuild kakoune autoload files' rebuild-autoload %{
    nop %sh{
        rm -rf "$kak_config/autoload/standard-library"
        mkdir -p "$kak_config/autoload"
        ln -s "$kak_runtime/autoload" "$kak_config/autoload/standard-library"
    }
}

# Options ——————————————————————————————————————————————————————————————————————

# UI
set-option -add global ui_options terminal_status_on_top=yes
set-option -add global ui_options terminal_assistant=cat
set-option -add global ui_options terminal_set_title=no
delete-scratch-message

# Color scheme
# Gruvbox theme for Kakoune
# https://github.com/morhetz/gruvbox
colorscheme gruvbox-light
try %sh{
    echo "colorscheme gruvbox-"$(fish -c 'echo $OS_THEME')
}
# set background to terminal default
# set-face global Default rgb:ebdbb2,default

# Verbose Autoinfo
# set-option -add global autoinfo normal

# accept file updates
set-option global autoreload yes

# Indentation
# Indent with 2 spaces and make tabs 2 spaces wide.
set-indent global 2
enable-detect-indent
# enable-auto-indent

# Filetype-specific
# Makefile
hook global WinSetOption filetype=makefile %{
    set-option window indentwidth 0
}

# indentwidth 4 Spaces
# https://en.wikipedia.org/wiki/Indentation_(typesetting)#Indentation_in_programming
hook global WinSetOption filetype=(fish|fsharp|java|julia|kak|kotlin|perl|php|python|rust)  %{
    set-indent window 4
}

# Auto-pairing of characters
enable-auto-pairs

# Disable indentation hooks
# set-option global disabled_hooks '(?!auto)(?!detect)(?!modeline)(?!latex)(?!markdown)\K(.+)-(trim-indent|insert|indent)'

# Highlighters
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/show-matching show-matching
# add-highlighter global/ line '%val{cursor_line}' default,rgb:3c3735
add-highlighter global/ column 81 @MenuBackground
add-highlighter global/ wrap -indent -word
add-highlighter global/ regex \h+$ 0:Error

# Show selections
show-selected-text
set-face global SelectedText +a@MatchingChar

# Show whitespaces
add-highlighter -override global/show-whitespaces show-whitespaces
add-highlighter -override global/show-trailing-whitespaces regex '\h+$' '0:red+f'
# add-highlighter -override global/show-non-breaking-spaces regex ' +' '0:red+f'

# Show characters
add-highlighter -override global/show-unicode-2013 regex '–' '0:green+f'
add-highlighter -override global/show-unicode-2014 regex '—' '0:green+bf'
add-highlighter -override global/show-math-symbols regex '[−×]' '0:cyan+f'
add-highlighter -override global/show-limit regex '(?S)^.{79}[=+-–─┈]\K\n' '0:green+f'

# Scroll offset
set-option global scrolloff 5,1

# Clipboard
synchronize-clipboard
synchronize-buffer-directory-name-with-register d
hook global RegisterModified '"' %{
    nop %sh{
        printf %s "$kak_main_reg_dquote" | pbcopy
    }
}

# Tools
set-option global makecmd 'make -j 8'
set-option global grepcmd 'rg --column --with-filename'

# Windowing
hook global ModuleLoaded kitty %{
    set-option global kitty_window_type os-window
    alias global terminal kitty-terminal
    alias global popup kitty-terminal-popup
}

# Allow cycling to the next/previous candidate with <tab> and <s-tab> when completing a word
hook global InsertCompletionShow .* %{
        try %{
            execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


# Commands ——————————————————————————————————————————————————————————————————————

# Quick editing
define-command -docstring 'Open kakrc' edit-kakoune 'edit ~/.config/kak/kakrc'
define-command -docstring 'Open tmux.conf' edit-tmux 'edit ~/.tmux.conf'
define-command -docstring 'Open kitty.conf' edit-kitty 'edit ~/.config/kitty/kitty.conf'
define-command -docstring 'Open config.fish' edit-fish 'edit ~/.config/fish/config.fish'
define-command -docstring 'Open gitconfig' edit-git 'edit ~/.gitconfig'
define-command -docstring 'Open broot/conf.toml' edit-broot 'edit ~/.config/broot/conf.hjson'
define-command -docstring 'Open starship.toml' edit-starship 'edit ~/.config/starship.toml'
define-command -docstring 'Open yabairc' edit-yabai 'edit ~/.config/yabai/yabairc'
define-command -docstring 'Open skhdrc' edit-skhd 'edit ~/.config/skhd/skhdrc'
define-command -docstring 'Open spacebarrc' edit-spacebar 'edit ~/.config/spacebar/spacebarrc'

# lazygit
# https://github.com/jesseduffield/lazygit
define-command lazygit -params .. -docstring 'Open lazygit' %{
    + lazygit %arg{@}
}

# yadm
define-command -docstring 'open yadm with lazygit' yadm '> fish -c yadm'

# nnn
define-command -docstring 'open nnn window' nnn "> fish -ic 'nnn -s kak_$KAKOUNE_SESSION'"

# broot
define-command -docstring 'open broot window' broot '> broot'

# kitty popup
define-command -docstring 'kitty-terminal-popup <program> [arguments]: create a new terminal as an kitty OS window (title: popup)' \
    kitty-terminal-popup -override -params .. -shell-completion %{
        nop %sh{ kitty --single-instance --title "popup" "$@" }
    }

# Aliases ——————————————————————————————————————————————————————————————————————

# Aliases
alias global ek edit-kakoune

# Buffers
alias global bd delete-buffer

# Git
alias global lg lazygit

# n
alias global n nnn

# br
alias global br broot

# Mappings —————————————————————————————————————————————————————————————————————

# Normal mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# Hot reloading
map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'

# Editing
map -docstring 'save' global normal <c-s> ':write; echo saved<ret>'
map -docstring 'quit' global normal <c-q> ':quit<ret>'
map -docstring 'close buffer' global normal <c-w> ':delete-buffer<ret>'
map -docstring 'last buffer' global normal <c-a> ga
map -docstring 'Write and quit' global normal <c-x> ': write-quit<ret>'

# Search
# map -docstring 'search' global normal f ':search<ret>'
# map -docstring 'jump backward' global normal F <c-o>

# Selection primitives
map -docstring 'enter insert mode with main selection' global normal ^ ':enter-insert-mode-with-main-selection<ret>'
# map -docstring 'select next word' global normal w ':select-next-word<ret>'
map -docstring 'surround' global normal q ':surround<ret>'
map -docstring 'select objects' global normal S ':select-objects<ret>'
map -docstring 'select all occurrences of current selection' global normal <a-L> ':select-highlights<ret>'
map -docstring 'move line down' global normal <down> ':move-lines-down<ret>'
map -docstring 'move line up' global normal <up> ':move-lines-up<ret>'
map -docstring 'move line down' global normal <c-j> ':move-lines-down<ret>'
map -docstring 'move line up' global normal <c-k> ':move-lines-up<ret>'

# Tools
map -docstring 'math' global normal = ':math<ret>'

# Windowing
map -docstring 'new client' global normal <c-t> ':new<ret>'
map -docstring 'terminal' global normal <c-n> ':connect-terminal<ret>'
map -docstring 'file explorer' global normal <c-e> ":nnn<ret>"
map -docstring 'file picker' global normal <c-f> ':+ fish -ic kcr-fzf-files<ret>'
map -docstring 'buffer picker' global normal <c-b> ':+ fish -ic kcr-fzf-buffers<ret>'
map -docstring 'grep picker' global normal <c-g> ':+ fish -ic kcr-fzf-grep<ret>'
# map -docstring 'git' global normal <c-l> ':+ gitui<ret>'
map -docstring 'git' global normal <c-l> ':+ fish -ic lazygit<ret>'

# case insensitive search by default
map global normal / "/(?i)"

# delete line
map global normal D     ';<a-l>d'

# Move macros to ^
# map -docstring 'Play macro' global normal ^ q
# map -docstring 'Record macro' global normal <a-^> Q

# Insert mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# jj to exit
hook global InsertChar j %{ try %{
    exec -draft hH <a-k>jj<ret> d
      exec <esc>
}}

map -docstring 'indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'deindent' global insert <s-tab> '<a-;><lt>'

# Minimal set of readline mappings
map -docstring "move the cursor to the start of the line"        global insert <c-a> '<a-;>gh'
map -docstring "move the cursor to the end of the line"          global insert <c-e> '<esc>glli'
map -docstring "delete the character under the anchor"           global insert <c-d> '<a-;>c'
map -docstring "delete from the cursor to the start of the line" global insert <c-u> '<esc>h<a-h>c'
map -docstring "delete from the cursor to the end of the line"   global insert <c-k> '<esc><a-l>c'
map -docstring "delete until the next word boundary"             global insert <a-d> '<esc>ec'
map -docstring "delete until the previous word boundary"         global insert <c-w> '<esc>bc'
map -docstring "paste before the cursor"                         global insert <c-y> '<esc>Pi'

# View mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

map -docstring 'show palette' global view p '<esc>:show-palette<ret>'

# User mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# spell checking
map global user s ': enter-user-mode spell<ret>' -docstring 'enter spell mode'
declare-user-mode spell
map global spell d ': set-option current spell_lang de; spell<ret>' -docstring 'German check'
map global spell e ': set-option current spell_lang en; spell<ret>' -docstring 'Englisch check'
map global spell n ': spell-next<ret>_: enter-user-mode spell<ret>' -docstring 'next'
map global spell r ': spell-replace<ret>' -docstring 'replace'
map global spell a ': spell-add; spell<ret>' -docstring 'add to dictionary'
map global spell c ': spell-clear<ret>' -docstring 'clear'
hook global ModeChange push:[^:]*:next-key\[user.spell\] %{
        hook -once -always window NormalIdle .* spell-clear
}

# edit kakrc
map -docstring 'Open kakrc' global user <,> ': edit-kakoune<ret>'

# commenting
map global user c -docstring '(un-)comment line' ': comment-line<ret>'
map global user C -docstring '(un-)comment block' ': comment-block<ret>'

# UI toggles
map global user -docstring "UI mode" u ': enter-user-mode ui<ret>'

# pasting from clipboard
map global user -docstring "paste over from system clipboard" R '\| pbpaste<ret>'
map global user -docstring "paste after from clipboard" p '\<a-!> pbpaste<ret>'
map global user -docstring "paste before from clipboard" P '\! pbpaste<ret>'

# Linting & Formatting —————————————————————————————————————————————————————————

hook global WinSetOption filetype=fish %{
    set-option window lintcmd 'fish -n'
    set-option window formatcmd 'fish_indent'
}

hook global WinSetOption filetype=haskell %{
    set-option window lintcmd 'hlint'
}

hook global BufSetOption filetype=json %{
    set-option buffer formatcmd "jq --indent %opt{tabstop} ."
}

hook global BufSetOption filetype=(css|javascipt|yaml) %{
    set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
}

# handled by lsp
# hook global BufSetOption filetype=(java) %{
#     set-option buffer formatcmd "prettier --plugin=/usr/local/lib/node_modules/prettier-plugin-java/ --stdin-filepath=%val{buffile}"
# }

# handled by spellcheck.kak
# hook global WinSetOption filetype=sh %{
#     set-option window lintcmd 'shellcheck'
# }

hook global WinSetOption filetype=python %{
    set-option window lintcmd "flake8 --filename='*' --format='%%(path)s:%%(row)d:%%(col)d: error: %%(text)s' --ignore=E121,E123,E126,E226,E24,E704,W503,W504,E501,E221,E127,E128,E129,F405"
}

hook global BufSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt'
}

# text files
hook global WinSetOption filetype=(asciidoc|fountain|latex|markdown|plain) %{
    set-option window lintcmd "proselint"
    # (?<=^[-]{3}\n)(.*^)(header-includes:)(?=.*^[-|.]{3}\n)
    set-option window formatcmd "pandoc -f %opt{filetype} -t %opt{filetype}-fenced_code_attributes-smart --standalone --reference-links"
}

# Enable automatic formatting
hook global BufWritePre .* %{
    evaluate-commands %sh{
        # if [ -n "$kak_opt_formatcmd" ]; then
        #     echo format-buffer
        # fi
    }
    # lsp-formatting-sync
}

# Enable automatic linting
hook global BufWritePost .* %{
    evaluate-commands %sh{
        if [ -n "$kak_opt_lintcmd" ]; then
            echo lint-buffer
        fi
    }
}

# Git ——————————————————————————————————————————————————————————————————————————

# update git gutter on write
# enable flag-lines hl for git diff
hook global WinCreate .* %{
    add-highlighter window/git-diff flag-lines Default git_diff_flags
}
# trigger update diff if inside git dir
hook global BufOpenFile .* %{
    evaluate-commands -draft %sh{
        cd $(dirname "$kak_buffile")
        if [ "$(git rev-parse --git-dir 2>/dev/null)" ]; then
            for hook in WinCreate BufReload BufWritePost; do
                printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
            done
        fi
    }
}

# LSP ——————————————————————————————————————————————————————————————————————————

set global lsp_cmd "kak-lsp -s %val{session} --config ~/.config/kak-lsp/kak-lsp.toml"

# uncomment to enable debugging
# set global lsp_cmd "kak-lsp -s %val{session} --config ~/.config/kak-lsp/kak-lsp.toml -vvv --log /tmp/kak-lsp.log"
# eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}

# set global lsp_diagnostic_line_error_sign '║'
# set global lsp_diagnostic_line_warning_sign '┊'

define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

map global normal <#> ': enter-user-mode lsp<ret>' -docstring 'lsp'

set-option global lsp_auto_highlight_references true
set global lsp_hover_anchor true
echo -debug "Enabling LSP for filtetype %opt{filetype}"

hook global WinSetOption filetype=(c|cpp|cc|rust|python|java|latex|markdown) %{
    lsp-auto-hover-enable
    lsp-enable-window
}

hook global WinSetOption filetype=python %{
    set-option global lsp_server_configuration pyls.configurationSources=["flake8"]
}

hook global KakEnd .* lsp-exit

# Plugins ——————————————————————————————————————————————————————————————————————

source "~/.config/kak/plugins.kak"
