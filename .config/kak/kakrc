# Preamble —————————————————————————————————————————————————————————————————————

evaluate-commands %sh{
    cork init
    kcr init kakoune
}

# upgrade Autoload files
define-command -override -docstring 'rebuild kakoune autoload files' \
rebuild-autoload %{
    nop %sh{
        rm -rf "$kak_config/autoload/standard-library"
        mkdir -p "$kak_config/autoload"
        ln -s "$kak_runtime/autoload" "$kak_config/autoload/standard-library"
    }
}

# Plugins ——————————————————————————————————————————————————————————————————————

cork active-window https://github.com/greenfork/active-window.kak

cork auto-pairs https://github.com/alexherbo2/auto-pairs.kak %{
    enable-auto-pairs
}

cork indent https://github.com/alexherbo2/indent.kak %{
    set-indent global 2
}

cork extra-filetypes https://github.com/kakoune-editor/kakoune-extra-filetypes

cork find https://github.com/occivink/kakoune-find

cork shellcheck https://gitlab.com/Screwtapello/kakoune-shellcheck.git

cork state-save https://gitlab.com/Screwtapello/kakoune-state-save.git %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }
    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
       state-save-reg-save slash
    }
}

cork sudo-write https://github.com/occivink/kakoune-sudo-write

cork table https://gitlab.com/listentolist/kakoune-table.git %{
    map global user t ": enter-user-mode table<ret>" -docstring "table"
    map global user T ": enter-user-mode -lock table<ret>" -docstring "table (lock)"
}

cork text-objects https://github.com/Delapouite/kakoune-text-objects

cork vertical-selection https://github.com/occivink/kakoune-vertical-selection

cork mark https://github.com/alexherbo2/mark.kak

cork number-toggle https://github.com/evanrelf/number-toggle.kak %{
    require-module number-toggle
    set-option global number_toggle_params -hlcursor
}

cork scrollbar https://github.com/sawdust-and-diamonds/scrollbar.kak %{
    hook global WinCreate .* %{ scrollbar-enable }
}

cork select https://github.com/alexherbo2/select.kak %{
    map -docstring 'select mode' global normal S ':select-mode<ret>'
}

cork shortcuts https://github.com/alexherbo2/shortcuts.kak

cork show-whitespaces https://github.com/alexherbo2/show-whitespaces.kak

cork surround https://github.com/alexherbo2/surround.kak %{
    map -docstring 'surround mode' global normal q ':surround-mode<ret>'
}

cork tiny https://github.com/alexherbo2/tiny.kak %{
    make-directory-on-save
    remove-scratch-message
}

cork todo https://github.com/kkga/todo.kak %{
    hook global WinCreate (.*/)?TODO %{ set buffer filetype todo }
    hook global WinSetOption filetype=todo %{
        add-highlighter buffer/ regex '^[A-Z0-9 ]+:$' 0:yellow+b
    }
    hook global WinSetOption filetype=(markdown|todo) %{
        require-module todo
        map buffer normal <ret> ': todo-toggle<ret>' -docstring "toggle checkbox"
        add-highlighter buffer/ regex '\[ \]' 0:blue+b
        add-highlighter buffer/ regex '\[x\]' 0:comment
    }
}

cork ui https://github.com/kkga/ui.kak %{
    set-face global TodoComment +b@Information
    # set-option global ui_whitespaces_flags -spc '·' -lf ' ' -tab '┊' -tabpad ' '
    set-option global ui_line_numbers_flags -hlcursor -relative
    set-option global ui_wrap_flags -word -indent
    hook global WinCreate .* %{
        ui-whitespaces-toggle
        ui-trailing-spaces-toggle
        ui-search-toggle
        ui-matching-toggle
        ui-todos-toggle
        ui-lint-toggle
        ui-git-diff-toggle
        ui-wrap-toggle
    }
}

cork window https://github.com/alexherbo2/window.kak

try %{ source "~/git/modeline-extras.kak/rc/modeline-extras.kak" }
hook global ModuleLoaded modeline-extras %{
    # enable Nerd Font symbols
    set-option global modeline_nerdfont true

    # enable options
    modeline-git-branch-enable
    modeline-indent-enable
    modeline-lsp-enable
    # modeline-codepoint-enable

    # Git branch + Filename
    set-option global modelinefmt '{magenta+i}%opt{modeline_git_branch} {bright-blue+u}%val{bufname}{default}'
    # Position
    set-option -add global modelinefmt ' %val{cursor_line}:%val{cursor_char_column} {default}'
    # Context Info + Mode Info
    set-option -add global modelinefmt ' {{context_info}} {{mode_info}}'
    # out-of-view
    # set-option -add global modelinefmt ' {StatusLineMode}%opt{out_of_view_status_line}{default}'
    # lsp
    set-option -add global modelinefmt ' {DiagnosticError}%opt{modeline_lsp_err}{DiagnosticWarning}%opt{modeline_lsp_warn}{default}'
    # Filetype + Indentwidth
    set-option -add global modelinefmt ' %opt{filetype} %opt{modeline_indent}'
    # client@session
    set-option -add global modelinefmt ' {bright-cyan}%val{client}{bright-cyan+b}%val{session}'
}
require-module modeline-extras

try %{ source "~/git/pandoc.kak/rc/pandoc.kak" }
hook global WinSetOption filetype=(asciidoc|fountain|html|latex|markdown) %{
    require-module pandoc
    set-option global pandoc_options '-d default'
}


# Options ——————————————————————————————————————————————————————————————————————

# UI
set-option -add global ui_options terminal_status_on_top=yes
set-option -add global ui_options terminal_assistant=none
set-option -add global ui_options terminal_set_title=no

# Color scheme
# set to dark or light depending on environment variable
# Gruvbox theme for Kakoune
# https://github.com/morhetz/gruvbox
evaluate-commands %sh{
    echo "colorscheme gruvbox-"$OS_THEME
}

# accept file updates
set-option global autoreload yes

# Filetype-specific
# Makefile
hook global WinSetOption filetype=makefile %{
    set-option window indentwidth 0
}

# indentwidth 4 Spaces
# https://en.wikipedia.org/wiki/Indentation_(typesetting)#Indentation_in_programming
hook global WinSetOption filetype=(c|fish|fsharp|java|julia|kak|kotlin|perl|php|python|rust)  %{
    set-indent window 4
}

# Highlighters
add-highlighter -override global/ column '%opt{autowrap_column}' @SecondaryCursorEol

# Show characters
add-highlighter -override global/show-unicode-2013 regex '–' '0:green+f'
add-highlighter -override global/show-unicode-2014 regex '—' '0:green+bf'
add-highlighter -override global/show-math-symbols regex '[−×]' '0:cyan+f'

# Scroll offset
set-option global scrolloff 5,1

# Clipboard
# synchronize-terminal-clipboard
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | pbcopy
}}

# Tools
set-option global makecmd 'make -j 8'
set-option global grepcmd 'rg --column --with-filename'

# Windowing
hook global ModuleLoaded kitty %{
    set-option global kitty_window_type os-window
    alias global terminal kitty-terminal
    alias global popup kitty-terminal-popup
}

# Allow cycling to the next/previous candidate with <tab> and <s-tab> when completing a word
hook global InsertCompletionShow .* %{
        try %{
            execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


# Commands ——————————————————————————————————————————————————————————————————————

# Quick editing
define-command -override -docstring 'Open kakrc' edit-kakoune 'edit ~/.config/kak/kakrc'
define-command -override -docstring 'Open tmux.conf' edit-tmux 'edit ~/.tmux.conf'
define-command -override -docstring 'Open kitty.conf' edit-kitty 'edit ~/.config/kitty/kitty.conf'
define-command -override -docstring 'Open config.fish' edit-fish 'edit ~/.config/fish/config.fish'
define-command -override -docstring 'Open gitconfig' edit-git 'edit ~/.gitconfig'
define-command -override -docstring 'Open broot/conf.toml' edit-broot 'edit ~/.config/broot/conf.hjson'
define-command -override -docstring 'Open starship.toml' edit-starship 'edit ~/.config/starship.toml'
define-command -override -docstring 'Open yabairc' edit-yabai 'edit ~/.config/yabai/yabairc'
define-command -override -docstring 'Open skhdrc' edit-skhd 'edit ~/.config/skhd/skhdrc'
define-command -override -docstring 'Open sketchybarrc' edit-sketchybar 'edit ~/.config/sketchybar/sketchybarrc'
define-command -override -docstring 'Open tridactyl' edit-tridactyl 'edit ~/.config/tridactyl/tridactylrc'

# lazygit
# https://github.com/jesseduffield/lazygit
define-command -override lazygit -params .. -docstring 'Open lazygit' %{
    connect popup lazygit %arg{@}
}

# yadm
define-command -override -docstring 'open yadm with lazygit' yadm 'connect terminal fish -c yadm'

# nnn
define-command -override -docstring 'open nnn window' nnn "connect terminal fish -ic 'nnn -s kak_$KAKOUNE_SESSION'"

# broot
define-command -override -docstring 'open broot window' broot 'connect terminal broot'

# kitty popup
define-command -override -docstring 'kitty-terminal-popup <program> [arguments]: create a new terminal as an kitty OS window (title: popup)' \
    kitty-terminal-popup -params .. -shell-completion %{
        kitty-terminal --type=overlay %arg{@}
}

# ide
define-command -override ide %{
    set-option global kitty_window_type window

    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client lsp
    lsp-auto-hover-enable lsp

    focus main
    set-option global kitty_window_type os-window
}

# Aliases ——————————————————————————————————————————————————————————————————————

# Aliases
alias global ek edit-kakoune

# Buffers
alias global bd delete-buffer

# Git
alias global lg lazygit

# n
alias global n nnn

# br
alias global br broot

# Mappings —————————————————————————————————————————————————————————————————————

# Normal mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# Arrow keys
map global normal <left> 'h'
map global normal <down> 'j'
map global normal <up> 'k'
map global normal <right> 'l'

# keep normal word movement (overridden by shortcutn.kak)
map global normal w 'w'

# Hot reloading
map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'

# Editing
map -docstring 'save' global normal <c-s> ':write; echo saved<ret>'
map -docstring 'quit' global normal <c-q> ':quit<ret>'

# Tools
map -docstring 'move line down' global normal <c-j> ':move-lines-down<ret>'
map -docstring 'move line up' global normal <c-k> ':move-lines-up<ret>'

# Windowing
map -docstring 'git (popup)' global normal <c-l> ':connect popup fish -ic lazygit<ret>'
map -docstring 'terminal' global normal <c-ret> ':connect terminal fish<ret>'
map -docstring 'file explorer' global normal <c-e> ":nnn<ret>"
map -docstring 'file picker' global normal <c-f> ":connect popup fish -ic 'kcr fzf files'<ret>"
map -docstring 'buffer picker' global normal <c-b> ":connect popup fish -ic 'kcr fzf buffers'<ret>"
map -docstring 'grep picker' global normal <c-g> ":connect popup fish -ic 'kcr fzf grep'<ret>"
map -docstring 'grep picker (buffer)' global normal <c-r> ":connect popup fish -ic 'kcr fzf grep $argv[1]' -- %val{buflist}<ret>"

# case insensitive search by default
map global normal / "/(?i)"

# Commenting
map -docstring 'comment line' global normal <#> ':comment-line<ret>'
map -docstring 'comment block' global normal <a-#> ':comment-block<ret>'

# Move macros to ^
map -docstring 'Play macro' global normal ^ q
map -docstring 'Record macro' global normal <a-^> Q

# Insert mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

map -docstring 'indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'deindent' global insert <s-tab> '<a-;><lt>'

# Minimal set of readline mappings
map -docstring "move the cursor to the start of the line"        global insert <c-a> '<a-;>gh'
map -docstring "move the cursor to the end of the line"          global insert <c-e> '<esc>glli'
map -docstring "delete the character under the anchor"           global insert <c-d> '<a-;>c'
map -docstring "delete from the cursor to the start of the line" global insert <c-u> '<esc>h<a-h>c'
map -docstring "delete from the cursor to the end of the line"   global insert <c-k> '<esc><a-l>c'
map -docstring "delete until the next word boundary"             global insert <a-d> '<esc>ec'
map -docstring "delete until the previous word boundary"         global insert <c-w> '<esc>bc'
map -docstring "paste before the cursor"                         global insert <c-y> '<esc>Pi'

# User mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# Editing
map -docstring 'write' global user w ': write; echo saved<ret>'
map -docstring 'write quit' global user W ': write-quit;<ret>'
map -docstring 'quit' global user q ': quit<ret>'
map -docstring 'quit!' global user Q ': quit!<ret>'
map -docstring 'delete buffer' global user d ': delete-buffer<ret>'
map -docstring 'delete buffer!' global user D ': delete-buffer!<ret>'

map -docstring 'format selection' global user F ': format<ret>'
map -docstring 'format buffer' global user f ': format-buffer<ret>'
map -docstring "enter Git mode" global user g ": enter-user-mode git<ret>"
map -docstring 'enter LSP mode' global user l ': enter-user-mode lsp<ret>'
map -docstring 'enter kakmerge mode' global user m ': enter-user-mode kakmerge<ret>'
map -docstring 'enter spell mode' global user s ': enter-user-mode spell<ret>'

# edit kakrc
map -docstring 'Open kakrc' global user <,> ': edit-kakoune<ret>'

# commenting
map global user c -docstring '(un-)comment line' ': comment-line<ret>'
map global user C -docstring '(un-)comment block' ': comment-block<ret>'

# pasting from clipboard
map global user -docstring "paste over from system clipboard" R '\| pbpaste<ret>'
map global user -docstring "paste after from clipboard" p '\<a-!> pbpaste<ret>'
map global user -docstring "paste before from clipboard" P '\! pbpaste<ret>'

# git mode
try %{
declare-user-mode git
    map global git -docstring "commit - Record changes to the repository" c ": git commit<ret>"
    map global git -docstring "diff - Show changes between HEAD and working tree" d ": git diff<ret>"
    map global git -docstring "staged - Show staged changes" t ": git diff --staged<ret>"
    map global git -docstring "write - Write and stage the current file" w ": write<ret>: git add<ret>: git update-diff<ret>"
}

# spell checking mode
try %{
declare-user-mode spell
    map global spell d ': set-option current spell_lang de; spell<ret>' -docstring 'German check'
    map global spell e ': set-option current spell_lang en; spell<ret>' -docstring 'Englisch check'
    map global spell n ': spell-next<ret>_: enter-user-mode spell<ret>' -docstring 'next'
    map global spell r ': spell-replace<ret>' -docstring 'replace'
    map global spell a ': spell-add; spell<ret>' -docstring 'add to dictionary'
    map global spell c ': spell-clear<ret>' -docstring 'clear'
    hook global ModeChange push:[^:]*:next-key\[user.spell\] %{
            hook -once -always window NormalIdle .* spell-clear
    }
}

# kakmerge
try %{
    map global kakmerge -docstring "pick local" l ': kakmerge-pick local<ret>'
    map global kakmerge -docstring "pick base" b ': kakmerge-pick base<ret>'
    map global kakmerge -docstring "pick remote" r ': kakmerge-pick remote<ret>'
}

# View mode ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

# Linting & Formatting —————————————————————————————————————————————————————————

hook global WinSetOption filetype=c %{
    set-option window formatcmd 'clang-format -style=file'
}

hook global WinSetOption filetype=fish %{
    set-option window lintcmd 'fish -n'
    set-option window formatcmd 'fish_indent'
}

hook global WinSetOption filetype=haskell %{
    set-option window lintcmd 'hlint'
    set-option window formatcmd 'ormolu'
}

hook global BufSetOption filetype=json %{
    set-option buffer formatcmd "jq --indent %opt{tabstop} ."
}

hook global BufSetOption filetype=(css|javascipt|yaml) %{
    set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
}

# handled by lsp
# hook global BufSetOption filetype=(java) %{
    #     set-option buffer formatcmd "prettier --plugin=/usr/local/lib/node_modules/prettier-plugin-java/ --stdin-filepath=%val{buffile}"
# }

hook global BufSetOption filetype=(bash|sh) %{
    set-option buffer formatcmd "shfmt -i 2 -ci -bn %val{buffile}"
    set-option buffer lintcmd "shellcheck --shell=%opt{filetype}"
}

hook global WinSetOption filetype=python %{
    set-option window lintcmd "flake8 --filename='*' --format='%%(path)s:%%(row)d:%%(col)d: error: %%(text)s' --ignore=E121,E123,E126,E226,E24,E704,W503,W504,E501,E221,E127,E128,E129,F405"
}

hook global BufSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt'
}

# text files
hook global WinSetOption filetype=(asciidoc|fountain|latex|markdown|plain) %{
    set-option window lintcmd "proselint"
    # (?<=^[-]{3}\n)(.*^)(header-includes:)(?=.*^[-|.]{3}\n)
    set-option window formatcmd "pandoc -f %opt{filetype} -t %opt{filetype}-fenced_code_attributes-smart --standalone --reference-links"
}

# Enable automatic formatting
hook global BufWritePre .* %{
    evaluate-commands %sh{
        # if [ -n "$kak_opt_formatcmd" ]; then
        #     echo format-buffer
        # fi
    }
    # lsp-formatting-sync
}

# Enable automatic linting
hook global BufWritePost .* %{
    evaluate-commands %sh{
        if [ -n "$kak_opt_lintcmd" ]; then
            echo lint-buffer
        fi
    }
}

# Git ——————————————————————————————————————————————————————————————————————————

# update git gutter on write
# enable flag-lines hl for git diff
hook global WinCreate .* %{
    add-highlighter -override window/git-diff flag-lines Default git_diff_flags
}
# trigger update diff if inside git dir
hook global BufOpenFile .* %{
    evaluate-commands -draft %sh{
        cd $(dirname "$kak_buffile")
        if [ "$(git rev-parse --git-dir 2>/dev/null)" ]; then
            for hook in WinCreate BufReload BufWritePost; do
                printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
            done
        fi
    }
}

# LSP ——————————————————————————————————————————————————————————————————————————

try %sh{kak-lsp --kakoune --session "$kak_session"}
try lsp-enable
hook global KakEnd .* lsp-exit

set global lsp_cmd "kak-lsp -s %val{session} --config ~/.config/kak-lsp/kak-lsp.toml"

# uncomment to enable debugging
# set global lsp_cmd "kak-lsp -s %val{session} --config ~/.config/kak-lsp/kak-lsp.toml -vvv --log /tmp/kak-lsp.log"
# eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}

set-option global lsp_auto_highlight_references true
set-option global lsp_auto_show_code_actions true

set-option global lsp_config %{
    [language.python.settings._]
    pyls.configurationSources = ["flake8"]
}


face global InfoDefault               Information
face global InfoBlock                 Information
face global InfoBlockQuote            Information
face global InfoBullet                Information
face global InfoHeader                Information
face global InfoLink                  Information
face global InfoLinkMono              Information
face global InfoMono                  Information
face global InfoRule                  Information
face global InfoDiagnosticError       Information
face global InfoDiagnosticHint        Information
face global InfoDiagnosticInformation Information
face global InfoDiagnosticWarning     Information
